MooTools.More = {
    version: "1.4.0.1",
    build: "a4244edf2aa97ac8a196fc96082dd35af1abab87"
};
Request.JSONP = new Class({
    Implements: [Chain, Events, Options],
    options: {
        onRequest: function (a) {
            if (this.options.log && window.console && console.log) {
                console.log("JSONP retrieving script with url:" + a);
            }
        },
        onError: function (a) {
            if (this.options.log && window.console && console.warn) {
                console.warn("JSONP " + a + " will fail in Internet Explorer, which enforces a 2083 bytes length limit on URIs");
            }
        },
        url: "",
        callbackKey: "callback",
        injectScript: document.head,
        data: "",
        link: "ignore",
        timeout: 0,
        log: false
    },
    initialize: function (a) {
        this.setOptions(a);
    },
    send: function (c) {
        if (!Request.prototype.check.call(this, c)) {
            return this;
        }
        this.running = true;
        var d = typeOf(c);
        if (d == "string" || d == "element") {
            c = {
                data: c
            };
        }
        c = Object.merge(this.options, c || {});
        var e = c.data;
        switch (typeOf(e)) {
            case "element":
                e = document.id(e).toQueryString();
                break;
            case "object":
            case "hash":
                e = Object.toQueryString(e);
        }
        var b = this.index = Request.JSONP.counter++;
        var f = c.url + (c.url.test("\\?") ? "&" : "?") + (c.callbackKey) + "=Request.JSONP.request_map.request_" + b + (e ? "&" + e : "");
        if (f.length > 2083) {
            this.fireEvent("error", f);
        }
        Request.JSONP.request_map["request_" + b] = function () {
            this.success(arguments, b);
        }.bind(this);
        var a = this.getScript(f).inject(c.injectScript);
        this.fireEvent("request", [f, a]);
        if (c.timeout) {
            this.timeout.delay(c.timeout, this);
        }
        return this;
    },
    getScript: function (a) {
        if (!this.script) {
            this.script = new Element("script", {
                type: "text/javascript",
                async: true,
                src: a
            });
        }
        return this.script;
    },
    success: function (b, a) {
        if (!this.running) {
            return;
        }
        this.clear().fireEvent("complete", b).fireEvent("success", b).callChain();
    },
    cancel: function () {
        if (this.running) {
            this.clear().fireEvent("cancel");
        }
        return this;
    },
    isRunning: function () {
        return !!this.running;
    },
    clear: function () {
        this.running = false;
        if (this.script) {
            this.script.destroy();
            this.script = null;
        }
        return this;
    },
    timeout: function () {
        if (this.running) {
            this.running = false;
            this.fireEvent("timeout", [this.script.get("src"), this.script]).fireEvent("failure").cancel();
        }
        return this;
    }
});
Request.JSONP.counter = 0;
Request.JSONP.request_map = {};
var Asset = {
    javascript: function (d, b) {
        if (!b) {
            b = {};
        }
        var a = new Element("script", {
                src: d,
                type: "text/javascript"
            }),
            e = b.document || document,
            c = b.onload || b.onLoad;
        delete b.onload;
        delete b.onLoad;
        delete b.document;
        if (c) {
            if (typeof a.onreadystatechange != "undefined") {
                a.addEvent("readystatechange", function () {
                    if (["loaded", "complete"].contains(this.readyState)) {
                        c.call(this);
                    }
                });
            } else {
                a.addEvent("load", c);
            }
        }
        return a.set(b).inject(e.head);
    },
    css: function (d, a) {
        if (!a) {
            a = {};
        }
        var b = new Element("link", {
            rel: "stylesheet",
            media: "screen",
            type: "text/css",
            href: d
        });
        var c = a.onload || a.onLoad,
            e = a.document || document;
        delete a.onload;
        delete a.onLoad;
        delete a.document;
        if (c) {
            b.addEvent("load", c);
        }
        return b.set(a).inject(e.head);
    },
    image: function (c, b) {
        if (!b) {
            b = {};
        }
        var d = new Image(),
            a = document.id(d) || new Element("img");
        ["load", "abort", "error"].each(function (e) {
            var g = "on" + e,
                f = "on" + e.capitalize(),
                h = b[g] || b[f] || function () {};
            delete b[f];
            delete b[g];
            d[g] = function () {
                if (!d) {
                    return;
                }
                if (!a.parentNode) {
                    a.width = d.width;
                    a.height = d.height;
                }
                d = d.onload = d.onabort = d.onerror = null;
                h.delay(1, a, a);
                a.fireEvent(e, a, 1);
            };
        });
        d.src = a.src = c;
        if (d && d.complete) {
            d.onload.delay(1);
        }
        return a.set(b);
    },
    images: function (c, b) {
        c = Array.from(c);
        var d = function () {},
            a = 0;
        b = Object.merge({
            onComplete: d,
            onProgress: d,
            onError: d,
            properties: {}
        }, b);
        return new Elements(c.map(function (f, e) {
            return Asset.image(f, Object.append(b.properties, {
                onload: function () {
                    a++;
                    b.onProgress.call(this, a, e, f);
                    if (a == c.length) {
                        b.onComplete();
                    }
                },
                onerror: function () {
                    a++;
                    b.onError.call(this, a, e, f);
                    if (a == c.length) {
                        b.onComplete();
                    }
                }
            }));
        }));
    }
};